{
  "id": "56dcce00ff9535432e1f0a3b0a855aa8",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.6",
  "solcLongVersion": "0.7.6+commit.7338295f",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/openzeppelin/contracts/mocks/EtherReceiverMock.sol": {
        "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\ncontract EtherReceiverMock {\n    bool private _acceptEther;\n\n    function setAcceptEther(bool acceptEther) public {\n        _acceptEther = acceptEther;\n    }\n\n    receive () external payable {\n        if (!_acceptEther) {\n            revert();\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/openzeppelin/contracts/mocks/EtherReceiverMock.sol": {
        "EtherReceiverMock": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bool",
                  "name": "acceptEther",
                  "type": "bool"
                }
              ],
              "name": "setAcceptEther",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe608060405260043610601f5760003560e01c80634fea120c146038576033565b3660335760005460ff16603157600080fd5b005b600080fd5b348015604357600080fd5b50603160048036036020811015605857600080fd5b506000805460ff19169135151591909117905556fea2646970667358221220961afb9e14c9d316c5f1a746fd9690c45d45d86fba3e3a851c7c87d202de146764736f6c63430007060033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA3 DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x1F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FEA120C EQ PUSH1 0x38 JUMPI PUSH1 0x33 JUMP JUMPDEST CALLDATASIZE PUSH1 0x33 JUMPI PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x31 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 CALLDATALOAD ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 BYTE 0xFB SWAP15 EQ 0xC9 0xD3 AND 0xC5 CALL 0xA7 CHAINID REVERT SWAP7 SWAP1 0xC4 0x5D GASLIMIT 0xD8 PUSH16 0xBA3E3A851C7C87D202DE146764736F6C PUSH4 0x43000706 STOP CALLER ",
              "sourceMap": "58:261:0:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405260043610601f5760003560e01c80634fea120c146038576033565b3660335760005460ff16603157600080fd5b005b600080fd5b348015604357600080fd5b50603160048036036020811015605857600080fd5b506000805460ff19169135151591909117905556fea2646970667358221220961afb9e14c9d316c5f1a746fd9690c45d45d86fba3e3a851c7c87d202de146764736f6c63430007060033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x1F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FEA120C EQ PUSH1 0x38 JUMPI PUSH1 0x33 JUMP JUMPDEST CALLDATASIZE PUSH1 0x33 JUMPI PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x31 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 CALLDATALOAD ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 BYTE 0xFB SWAP15 EQ 0xC9 0xD3 AND 0xC5 CALL 0xA7 CHAINID REVERT SWAP7 SWAP1 0xC4 0x5D GASLIMIT 0xD8 PUSH16 0xBA3E3A851C7C87D202DE146764736F6C PUSH4 0x43000706 STOP CALLER ",
              "sourceMap": "58:261:0:-:0;;;;;;;;;;;;;;;;;;;;;;;264:12;;;;259:52;;292:8;;;259:52;58:261;;;;;123:92;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;182:12:0;:26;;-1:-1:-1;;182:26:0;123:92;;;;182:26;;;;;;123:92::o"
            },
            "methodIdentifiers": {
              "setAcceptEther(bool)": "4fea120c"
            }
          }
        }
      }
    },
    "sources": {
      "contracts/openzeppelin/contracts/mocks/EtherReceiverMock.sol": {
        "ast": {
          "absolutePath": "contracts/openzeppelin/contracts/mocks/EtherReceiverMock.sol",
          "exportedSymbols": {
            "EtherReceiverMock": [
              25
            ]
          },
          "id": 26,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.7",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 25,
              "linearizedBaseContracts": [
                25
              ],
              "name": "EtherReceiverMock",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 3,
                  "mutability": "mutable",
                  "name": "_acceptEther",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "91:25:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "91:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 12,
                    "nodeType": "Block",
                    "src": "172:43:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 10,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 8,
                            "name": "_acceptEther",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "182:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 9,
                            "name": "acceptEther",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "197:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "182:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 11,
                        "nodeType": "ExpressionStatement",
                        "src": "182:26:0"
                      }
                    ]
                  },
                  "functionSelector": "4fea120c",
                  "id": 13,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setAcceptEther",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 6,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "acceptEther",
                        "nodeType": "VariableDeclaration",
                        "scope": 13,
                        "src": "147:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "147:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "146:18:0"
                  },
                  "returnParameters": {
                    "id": 7,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "172:0:0"
                  },
                  "scope": 25,
                  "src": "123:92:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 23,
                    "nodeType": "Block",
                    "src": "249:68:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 17,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "263:13:0",
                          "subExpression": {
                            "id": 16,
                            "name": "_acceptEther",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "264:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 22,
                        "nodeType": "IfStatement",
                        "src": "259:52:0",
                        "trueBody": {
                          "id": 21,
                          "nodeType": "Block",
                          "src": "278:33:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 18,
                                  "name": "revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -19,
                                    -19
                                  ],
                                  "referencedDeclaration": -19,
                                  "src": "292:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 19,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "292:8:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 20,
                              "nodeType": "ExpressionStatement",
                              "src": "292:8:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 24,
                  "implemented": true,
                  "kind": "receive",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "229:2:0"
                  },
                  "returnParameters": {
                    "id": 15,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "249:0:0"
                  },
                  "scope": 25,
                  "src": "221:96:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 26,
              "src": "58:261:0"
            }
          ],
          "src": "33:287:0"
        },
        "id": 0
      }
    }
  }
}
